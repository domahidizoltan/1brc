/*
The One Billion Row Challenge (1BRC) is a fun exploration of how far modern Golang can be pushed for aggregating one billion rows from a text file. Grab all your (virtual) threads, reach out to SIMD, optimize your GC, or pull any other trick, and create the fastest implementation for solving this task!
The text file contains temperature values for a range of weather stations. Each row is one measurement in the format <string: station name>;<double: measurement>, with the measurement value having exactly one fractional digit. The following shows ten rows as an example:
```
Hamburg;12.0
Bulawayo;8.9
Palembang;38.8
St. John's;15.2
Cracow;12.6
Bridgetown;26.9
Istanbul;6.2
Roseau;34.4
Conakry;31.2
Istanbul;23.0
```
The task is to write a Golang program which reads the file, calculates the min, mean, and max temperature value per weather station, and emits the results on stdout like this (i.e. sorted alphabetically by station name, and the result values per station in the format `<min>/<mean>/<max>`, rounded to one fractional digit):
```
{Abha=-23.0/18.0/59.2, Abidjan=-16.2/26.0/67.3, Abéché=-10.0/29.4/69.0, Accra=-10.1/26.4/66.4, Addis Ababa=-23.7/16.0/67.0, Adelaide=-27.8/17.3/58.5, ...}
```

## Rules and limits
- No external library dependencies may be used
- Implementations must be provided as a single source file
- The computation must happen at application runtime, i.e. you cannot process the measurements file at build time and just bake the result into the binary
- Input value ranges are as follows:
  - Station name: non null UTF-8 string of min length 1 character and max length 100 bytes, containing neither `;` nor `\n` characters. (i.e. this could be 100 one-byte characters, or 50 two-byte characters, etc.)
  - Temperature value: non null double between -99.9 (inclusive) and 99.9 (inclusive), always with one fractional digit
- There is a maximum of 10,000 unique station names
- Line endings in the file are `\n` characters on all platforms
- Implementations must not rely on specifics of a given data set, e.g. any valid station name as per the constraints above and any data distribution (number of measurements per station) must be supported
- The rounding of output values must be done using the semantics of IEEE 754 rounding-direction "roundTowardPositive"


Note: There is no limitation what the solution contains and the code readability is also not a concern. The most important thing is to use all the available hardware resources (use multi-threading) and process the file in the shortest possible time.
*/

package main

import (
	"bufio"
	"fmt"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
)

type StationData struct {
	min, max, totalTemp, count float64
}

var (
	stationTemperatures = make(map[string]*StationData)
	mu                  sync.Mutex
)

func processLine(line string) {
	parts := strings.Split(line, ";")
	if len(parts) != 2 {
		return // Skip invalid lines
	}
	station, tempStr := parts[0], parts[1]
	temp, err := strconv.ParseFloat(tempStr, 64)
	if err != nil {
		return // Skip lines with invalid temperature values
	}

	mu.Lock()
	defer mu.Unlock()
	if data, exists := stationTemperatures[station]; exists {
		data.min = math.Min(data.min, temp)
		data.max = math.Max(data.max, temp)
		data.totalTemp += temp
		data.count++
	} else {
		stationTemperatures[station] = &StationData{min: temp, max: temp, totalTemp: temp, count: 1}
	}
}

func main() {
	file, err := os.Open("data.txt")
	if err != nil {
		fmt.Println("Error opening file:", err)
		return
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		processLine(scanner.Text())
	}

	if err := scanner.Err(); err != nil {
		fmt.Println("Error reading file:", err)
		return
	}

	var stations []string
	for station := range stationTemperatures {
		stations = append(stations, station)
	}
	sort.Strings(stations)

	for _, station := range stations {
		data := stationTemperatures[station]
		mean := data.totalTemp / data.count
		fmt.Printf("%s=%.1f/%.1f/%.1f\n", station, data.min, mean, data.max)
	}
}



